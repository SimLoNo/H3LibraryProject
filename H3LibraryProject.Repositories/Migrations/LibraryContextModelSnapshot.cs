// <auto-generated />
using System;
using H3LibraryProject.Repositories.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace H3LibraryProject.Repositories.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("LeasePeriod")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("GenreId");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            LeasePeriod = (short)30,
                            Name = "Skønlitteratur"
                        },
                        new
                        {
                            GenreId = 2,
                            LeasePeriod = (short)7,
                            Name = "Quicklån"
                        },
                        new
                        {
                            GenreId = 3,
                            LeasePeriod = (short)30,
                            Name = "Faglitteratur"
                        },
                        new
                        {
                            GenreId = 4,
                            LeasePeriod = (short)30,
                            Name = "Børnebøger"
                        },
                        new
                        {
                            GenreId = 5,
                            LeasePeriod = (short)30,
                            Name = "Krimi"
                        },
                        new
                        {
                            GenreId = 6,
                            LeasePeriod = (short)30,
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Name = "Dansk"
                        },
                        new
                        {
                            LanguageId = 2,
                            Name = "Engelsk"
                        },
                        new
                        {
                            LanguageId = 3,
                            Name = "Japansk"
                        },
                        new
                        {
                            LanguageId = 4,
                            Name = "Russisk"
                        },
                        new
                        {
                            LanguageId = 5,
                            Name = "Hebræisk"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("date");

                    b.Property<int>("LoanerId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("date");

                    b.HasKey("LoanId");

                    b.HasIndex("LoanerId");

                    b.HasIndex("MaterialId");

                    b.ToTable("Loan");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Loaner", b =>
                {
                    b.Property<int>("LoanerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoanerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("LoanerId");

                    b.HasIndex("LoanerTypeId");

                    b.ToTable("Loaner");

                    b.HasData(
                        new
                        {
                            LoanerId = 1,
                            LoanerTypeId = 2,
                            Name = "Simon",
                            Password = "Passw0rd"
                        },
                        new
                        {
                            LoanerId = 2,
                            LoanerTypeId = 2,
                            Name = "Robin",
                            Password = "Passw0rd"
                        },
                        new
                        {
                            LoanerId = 3,
                            LoanerTypeId = 1,
                            Name = "Flemming",
                            Password = "Passw0rd"
                        },
                        new
                        {
                            LoanerId = 4,
                            LoanerTypeId = 1,
                            Name = "Anders",
                            Password = "Passw0rd"
                        },
                        new
                        {
                            LoanerId = 5,
                            LoanerTypeId = 1,
                            Name = "Kasper",
                            Password = "Passw0rd"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.LoanerType", b =>
                {
                    b.Property<int>("LoanerTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("LoanerTypeId");

                    b.ToTable("LoanerTypes");

                    b.HasData(
                        new
                        {
                            LoanerTypeId = 1,
                            Name = "Låner"
                        },
                        new
                        {
                            LoanerTypeId = 2,
                            Name = "Ansat"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("LocationId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Name = "Bibliotek Vest"
                        },
                        new
                        {
                            LocationId = 2,
                            Name = "Bibliotek Øst"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Home")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("LocationId");

                    b.HasIndex("TitleId");

                    b.ToTable("Material");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            Home = true,
                            LocationId = 1,
                            TitleId = 1
                        },
                        new
                        {
                            MaterialId = 2,
                            Home = true,
                            LocationId = 2,
                            TitleId = 1
                        },
                        new
                        {
                            MaterialId = 3,
                            Home = true,
                            LocationId = 1,
                            TitleId = 2
                        },
                        new
                        {
                            MaterialId = 4,
                            Home = true,
                            LocationId = 1,
                            TitleId = 3
                        },
                        new
                        {
                            MaterialId = 5,
                            Home = true,
                            LocationId = 2,
                            TitleId = 3
                        },
                        new
                        {
                            MaterialId = 6,
                            Home = true,
                            LocationId = 2,
                            TitleId = 4
                        },
                        new
                        {
                            MaterialId = 7,
                            Home = true,
                            LocationId = 1,
                            TitleId = 5
                        },
                        new
                        {
                            MaterialId = 8,
                            Home = true,
                            LocationId = 1,
                            TitleId = 5
                        },
                        new
                        {
                            MaterialId = 9,
                            Home = true,
                            LocationId = 1,
                            TitleId = 6
                        },
                        new
                        {
                            MaterialId = 10,
                            Home = true,
                            LocationId = 2,
                            TitleId = 6
                        },
                        new
                        {
                            MaterialId = 11,
                            Home = true,
                            LocationId = 1,
                            TitleId = 7
                        },
                        new
                        {
                            MaterialId = 12,
                            Home = true,
                            LocationId = 2,
                            TitleId = 8
                        },
                        new
                        {
                            MaterialId = 13,
                            Home = true,
                            LocationId = 2,
                            TitleId = 9
                        },
                        new
                        {
                            MaterialId = 14,
                            Home = true,
                            LocationId = 1,
                            TitleId = 10
                        },
                        new
                        {
                            MaterialId = 15,
                            Home = true,
                            LocationId = 2,
                            TitleId = 10
                        },
                        new
                        {
                            MaterialId = 16,
                            Home = true,
                            LocationId = 1,
                            TitleId = 11
                        },
                        new
                        {
                            MaterialId = 17,
                            Home = true,
                            LocationId = 1,
                            TitleId = 12
                        },
                        new
                        {
                            MaterialId = 18,
                            Home = true,
                            LocationId = 1,
                            TitleId = 13
                        },
                        new
                        {
                            MaterialId = 19,
                            Home = true,
                            LocationId = 1,
                            TitleId = 14
                        },
                        new
                        {
                            MaterialId = 20,
                            Home = true,
                            LocationId = 1,
                            TitleId = 15
                        },
                        new
                        {
                            MaterialId = 21,
                            Home = true,
                            LocationId = 2,
                            TitleId = 15
                        },
                        new
                        {
                            MaterialId = 22,
                            Home = true,
                            LocationId = 1,
                            TitleId = 15
                        },
                        new
                        {
                            MaterialId = 23,
                            Home = true,
                            LocationId = 2,
                            TitleId = 16
                        },
                        new
                        {
                            MaterialId = 24,
                            Home = true,
                            LocationId = 2,
                            TitleId = 3
                        },
                        new
                        {
                            MaterialId = 25,
                            Home = true,
                            LocationId = 2,
                            TitleId = 17
                        },
                        new
                        {
                            MaterialId = 26,
                            Home = true,
                            LocationId = 1,
                            TitleId = 18
                        },
                        new
                        {
                            MaterialId = 27,
                            Home = true,
                            LocationId = 2,
                            TitleId = 19
                        },
                        new
                        {
                            MaterialId = 28,
                            Home = true,
                            LocationId = 1,
                            TitleId = 19
                        },
                        new
                        {
                            MaterialId = 29,
                            Home = true,
                            LocationId = 1,
                            TitleId = 20
                        },
                        new
                        {
                            MaterialId = 30,
                            Home = true,
                            LocationId = 2,
                            TitleId = 21
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BYear")
                        .HasColumnType("int");

                    b.Property<int?>("DYear")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("MName")
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Author");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BYear = 973,
                            DYear = 1031,
                            FName = "Shibiku",
                            LName = "Murasaki",
                            NationalityId = 2
                        },
                        new
                        {
                            AuthorId = 2,
                            BYear = 1805,
                            DYear = 1875,
                            FName = "Hans",
                            LName = "Andersen",
                            MName = "Christian",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 3,
                            BYear = 1821,
                            DYear = 1881,
                            FName = "Fjodor",
                            LName = "Dostoyevskij",
                            MName = "Mikhájlovitj",
                            NationalityId = 5
                        },
                        new
                        {
                            AuthorId = 4,
                            BYear = 1960,
                            FName = "Elsebeth",
                            LName = "Egholm",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 5,
                            BYear = 1905,
                            DYear = 1979,
                            FName = "Hans",
                            LName = "Scherfig",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 6,
                            BYear = 1949,
                            FName = "Haruki",
                            LName = "Murakami",
                            NationalityId = 2
                        },
                        new
                        {
                            AuthorId = 7,
                            BYear = 1907,
                            DYear = 1976,
                            FName = "Egon",
                            LName = "Mathiesen",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 8,
                            BYear = 1965,
                            FName = "Dan",
                            LName = "Abnett",
                            NationalityId = 3
                        },
                        new
                        {
                            AuthorId = 9,
                            BYear = 1907,
                            DYear = 1976,
                            FName = "Tom",
                            LName = "Kristensen",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 10,
                            BYear = 1961,
                            FName = "Jesper",
                            LName = "Kurt-Nielsen",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 11,
                            BYear = 1933,
                            FName = "Cormac",
                            LName = "McCarthy",
                            NationalityId = 5
                        },
                        new
                        {
                            AuthorId = 12,
                            BYear = 1972,
                            FName = "Camille",
                            LName = "Blomst",
                            NationalityId = 1
                        },
                        new
                        {
                            AuthorId = 13,
                            BYear = 1984,
                            FName = "Leif",
                            LName = "Thomsen",
                            MName = "Donbæk",
                            NationalityId = 1
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Models.AuthorTitle", b =>
                {
                    b.Property<int>("AuthorTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("AuthorTitleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TitleId");

                    b.ToTable("AuthorTitle");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Nationality", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("NationalityId");

                    b.ToTable("Nationality");

                    b.HasData(
                        new
                        {
                            NationalityId = 1,
                            Name = "Danmark"
                        },
                        new
                        {
                            NationalityId = 2,
                            Name = "Japan"
                        },
                        new
                        {
                            NationalityId = 3,
                            Name = "Storbritanien"
                        },
                        new
                        {
                            NationalityId = 4,
                            Name = "USA"
                        },
                        new
                        {
                            NationalityId = 5,
                            Name = "Rusland"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publisher");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            Name = "Gyldendal"
                        },
                        new
                        {
                            PublisherId = 2,
                            Name = "Lindhardt & Ringhoff"
                        },
                        new
                        {
                            PublisherId = 3,
                            Name = "People's Press"
                        },
                        new
                        {
                            PublisherId = 4,
                            Name = "Angry Robot"
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(32)");

                    b.Property<short>("Pages")
                        .HasColumnType("smallint");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<short>("RYear")
                        .HasColumnType("smallint");

                    b.HasKey("TitleId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            TitleId = 1,
                            AuthorId = 1,
                            GenreId = 1,
                            LanguageId = 3,
                            Name = "Fortællingen om Genji",
                            Pages = (short)224,
                            PublisherId = 1,
                            RYear = (short)1021
                        },
                        new
                        {
                            TitleId = 2,
                            AuthorId = 2,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "Eventyr, fortalt for Børn",
                            Pages = (short)300,
                            PublisherId = 2,
                            RYear = (short)1837
                        },
                        new
                        {
                            TitleId = 3,
                            AuthorId = 3,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "Forbrydelse og Straf",
                            Pages = (short)684,
                            PublisherId = 1,
                            RYear = (short)1866
                        },
                        new
                        {
                            TitleId = 4,
                            AuthorId = 3,
                            GenreId = 1,
                            LanguageId = 2,
                            Name = "Idioten",
                            Pages = (short)843,
                            PublisherId = 1,
                            RYear = (short)1869
                        },
                        new
                        {
                            TitleId = 5,
                            AuthorId = 4,
                            GenreId = 2,
                            LanguageId = 1,
                            Name = "Den Røde Glente",
                            Pages = (short)408,
                            PublisherId = 3,
                            RYear = (short)2022
                        },
                        new
                        {
                            TitleId = 6,
                            AuthorId = 4,
                            GenreId = 5,
                            LanguageId = 1,
                            Name = "Den Røde Glente",
                            Pages = (short)408,
                            PublisherId = 3,
                            RYear = (short)2022
                        },
                        new
                        {
                            TitleId = 7,
                            AuthorId = 4,
                            GenreId = 1,
                            LanguageId = 4,
                            Name = "Idioten",
                            Pages = (short)843,
                            PublisherId = 3,
                            RYear = (short)2022
                        },
                        new
                        {
                            TitleId = 8,
                            AuthorId = 7,
                            GenreId = 4,
                            LanguageId = 1,
                            Name = "Aben Osvald",
                            Pages = (short)33,
                            PublisherId = 1,
                            RYear = (short)1947
                        },
                        new
                        {
                            TitleId = 9,
                            AuthorId = 8,
                            GenreId = 6,
                            LanguageId = 2,
                            Name = "Embedded",
                            Pages = (short)352,
                            PublisherId = 4,
                            RYear = (short)2011
                        },
                        new
                        {
                            TitleId = 10,
                            AuthorId = 6,
                            GenreId = 6,
                            LanguageId = 3,
                            Name = "Hard-boiled Wonderland & The End of The World",
                            Pages = (short)618,
                            PublisherId = 3,
                            RYear = (short)1985
                        },
                        new
                        {
                            TitleId = 11,
                            AuthorId = 6,
                            GenreId = 6,
                            LanguageId = 2,
                            Name = "Hard-boiled Wonderland & The End of The World",
                            Pages = (short)400,
                            PublisherId = 3,
                            RYear = (short)1991
                        },
                        new
                        {
                            TitleId = 12,
                            AuthorId = 5,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "Den Forsvundne Fuldmægtig",
                            Pages = (short)183,
                            PublisherId = 1,
                            RYear = (short)1938
                        },
                        new
                        {
                            TitleId = 13,
                            AuthorId = 5,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "Det Forsømte Forår",
                            Pages = (short)179,
                            PublisherId = 1,
                            RYear = (short)1940
                        },
                        new
                        {
                            TitleId = 14,
                            AuthorId = 5,
                            GenreId = 3,
                            LanguageId = 1,
                            Name = "Dammen",
                            Pages = (short)108,
                            PublisherId = 1,
                            RYear = (short)1958
                        },
                        new
                        {
                            TitleId = 15,
                            AuthorId = 9,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "Hærværk",
                            Pages = (short)430,
                            PublisherId = 1,
                            RYear = (short)1930
                        },
                        new
                        {
                            TitleId = 16,
                            AuthorId = 10,
                            GenreId = 3,
                            LanguageId = 1,
                            Name = "Manden der ikke ville være høflig",
                            Pages = (short)331,
                            PublisherId = 1,
                            RYear = (short)2020
                        },
                        new
                        {
                            TitleId = 17,
                            AuthorId = 10,
                            GenreId = 3,
                            LanguageId = 1,
                            Name = "Man tager en alligator eller leguan af passende størrelse",
                            Pages = (short)139,
                            PublisherId = 1,
                            RYear = (short)2006
                        },
                        new
                        {
                            TitleId = 18,
                            AuthorId = 11,
                            GenreId = 1,
                            LanguageId = 2,
                            Name = "No Country for Old Men",
                            Pages = (short)320,
                            PublisherId = 5,
                            RYear = (short)2005
                        },
                        new
                        {
                            TitleId = 19,
                            AuthorId = 11,
                            GenreId = 1,
                            LanguageId = 2,
                            Name = "The Road",
                            Pages = (short)287,
                            PublisherId = 5,
                            RYear = (short)2006
                        },
                        new
                        {
                            TitleId = 20,
                            AuthorId = 12,
                            GenreId = 1,
                            LanguageId = 1,
                            Name = "De siger man kan elske uden at få børn",
                            Pages = (short)202,
                            PublisherId = 1,
                            RYear = (short)2003
                        },
                        new
                        {
                            TitleId = 21,
                            AuthorId = 13,
                            GenreId = 3,
                            LanguageId = 1,
                            Name = "Personskade - sådan sikrer du dig den erstatning, du har ret til",
                            Pages = (short)166,
                            PublisherId = 1,
                            RYear = (short)2019
                        });
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Loan", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.Loaner", "LoanerLoaning")
                        .WithMany("Loans")
                        .HasForeignKey("LoanerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3LibraryProject.Repositories.Database.Material", "MaterialLoaned")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanerLoaning");

                    b.Navigation("MaterialLoaned");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Loaner", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.LoanerType", "TypeOfLoaner")
                        .WithMany()
                        .HasForeignKey("LoanerTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeOfLoaner");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Material", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.Location", "Location")
                        .WithMany("Materials")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3LibraryProject.Repositories.Database.Title", "Title")
                        .WithMany("Materials")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Models.Author", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nationality");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Models.AuthorTitle", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3LibraryProject.Repositories.Database.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Title", b =>
                {
                    b.HasOne("H3LibraryProject.Repositories.Database.Genre", "Genre")
                        .WithMany("Titles")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("H3LibraryProject.Repositories.Database.Language", null)
                        .WithMany("Titles")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Genre", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Language", b =>
                {
                    b.Navigation("Titles");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Loaner", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Location", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("H3LibraryProject.Repositories.Database.Title", b =>
                {
                    b.Navigation("Materials");
                });
#pragma warning restore 612, 618
        }
    }
}
